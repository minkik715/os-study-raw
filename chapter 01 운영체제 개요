우리는 일상에서 많은 운영체제를 경험하고 있다. 윈도우즈 맥 IOS 안드로이드 등 ... 
컴퓨터는 원래 미사일의 탄도를 계산하기 위해 개발되었다. 
계산기라 불리지 않고 컴퓨터라고 불리는 이유는 프로그래밍이 가능하기 때문이다. 
컴퓨터는 프로그램을 통해 무한한 기능 확장이 가능하다. 

컴퓨터에서는 데이터를 통해 작업들이 이루어진다. 
컴퓨터는 데이터를 읽고 처리하여 출력하거나 저장한다.
컴퓨터가 데이터를 처리하면 의미있는 자료가 되고 이를 정보라 부른다.
즉 데이터를 가공하여 유의미한 정보로 만드는 기술을 IT기술이라 부른다. 
IT는 Information Technology의 약자이다. 오늘 처음알았네 .. ㅎㄷㄷ
컴퓨터는 크게 하드웨어와 소프트웨어로 구성되는데 
소프트웨어는 하드웨어를 제어하여 작업을 시키는 명령어의 모음 즉 프로그램이다. 
소프트웨어는 데이터를 하드웨어를 통해 가공하여 의미있는 정보로 변경한다. 

소프트웨어는 크게 응용소프트웨어와 시스템 소프트웨어로 나뉜다.

응용소프트웨어는 문서작업, 동영상 플레이어등 사용자의 특정 작업을 위한 프로그램이고
시스템 소프트웨어는 응용소프트웨어와 하드웨어를 제어 및 관리하기 위한 소프트웨어로 운영체제와 유틸리티가 있다.


cf). 유틸리티란 운영체제에 기능이 많아지고 점점 복잡해짐에 따라 운영체제를 보조하는 소프트웨어로 파일 압축, 바이러스 검사 등이 있다.

컴퓨터에는 다양한 프로그램들이 설치되어 있는데 이 프로그램들은 모니터, 마우스, 키보드, CPU, 메모리 등 컴퓨터 자원을 공유해서 사용한다.

응용 프로그램에 의해 하드웨어가 망가지는 것을 방지하기 위해 컴퓨터 전체( 응용 소프트웨워와 하드웨어)를 관리하는 소프트웨어를 운영체제라고 한다.

응용프로그램이 컴퓨터자원을 사용하기 위해선 먼저 운영체제(최상의 소프트웨어)의 허락을 받은 후 사용할 수 있다.

운영체제는 응용프로그램이 컴퓨터 자원에 직접 접근하는 것을 제한함으로서 자원을 보호하고 관리한다. 
운영체제는 응용프로그램으로부터 컴퓨터 자원을 숨기고, 접근하는 방법들을 제한한다. ( 자바의 객체지향과 비슷한 느낌이군요)

인터페이스란 사용자가 컴퓨터를 사용할 수 있게 해주고 그 결과를 알려주는 장치이다.
여기서 잠깐 정리하면 내가 이해한 바를 Java의 객체지향에 덧대에 설명하면 
OS는 객체 클래스이고 컴퓨터 자원들은 private field 들이며 function을 통해 접근하는 것이 인터페이스인거 같다.
단 인터페이스는 컴퓨터 자원을 곧이 곳대로 주는게 아니라 가공하여 전달함. 

운영체제를 간단히 정리하면 컴퓨터 자원을 효율적이고 안전하게 관리하는 소프트웨어이다.

인터페이스 -> 컴퓨터 자원을 접근하는 방식들 
사용자들은 컴퓨터자원에 직접 접근하는게 아닌 다양한 의도를 위해 존재하는 인터페이스 중 하나를 이용해서 컴퓨터 자원을 사용한다 .

운영체제는 사용자들에게 컴퓨터 사용을 위한 인터페이스를 제공하여 컴퓨터 자원을 골고루 배분하며,
응용 프로그램으로 부터 자원을 회수하고 악의적은 응용프로그램으로 부터 컴퓨터자원을 보호한다.

질문 1. 사용자가 응용프로그램을 실행했을때 어떤일이 일어나는지 운영체제의 관점에서 설명해보세요.
답. 응용프로그램이 인터페이스를 통해 컴퓨터 자원에 접근요청을 하면 운영체제(커널)는 악의적인 응용프로그램인지 확인 후 
컴퓨터 자원을 확인 후 분배해주며 특정 조건이나 시간이 지나면 컴퓨터 자원을 회수합니다. 

응용 프로그램이 특정 목적을 위해 존재한다면 
운영체제는 컴퓨터에 있는 컴퓨터 자원을 조정하고 관리하기 위해 존재한다.
운영체제는 하드웨어의 도움 없이는 존재하기 힘들어 소프트웽와 하드웨어의 특성을 모두 갖춘체 운영 -> 펌웨어 ? 

질문 2. 펌웨어란 무엇인가? 
펌웨어는 해당 장치가 기능을을 수행하기 위해 필요한 최소한의 프로그램으로 
제조사가 생산할때 ROM에 저장하여 사용된다. 펌웨어는 하드웨어의 일부분이다. 
예를들어 바이오스 -> 데스크탑, 노트북에 존재하며 OS로부터 독립적으로 실행되며 제조사에 의해 개발된다.
바이오스를 통해 하드웨어를 설정 및 제어할 수 있다. 

하나의 장치가 컴퓨터에서 인식되기 위해선 
장치에 펌웨어가 존재하고 
컴퓨터 disk에 OS가 설치되어 있으며 OS는 해당 장치를 인식할 수 있는 드라이버가 필요하다.
드라이버가 펌웨어를 보고 인식해 컴퓨터해 등록해준다. 장치 드라이버는 한마디로 하드웨어와 운영체제 중간의 매개체로 보면된다.

운영체제는 커널과 인터페이스로 나뉘게된다. 
커널은 운영체제의 핵심 기능을 모아놓은 것이다. 
커널은 컴퓨터자원을 제어하는 프로그램으로 사용자나 응용소프트웨어가 컴퓨터 자원에 접근하기 위해선 커널을 무조건적으로 거쳐야한다.

사용자, 응용프로그램 -> 인터페이스 -> 커널 -> 컴퓨터자원 의 순으로 사용자가 컴퓨터 자원을 사용할 수 있다. 
인터페이스 (키보드, 모니터, 마우스 ...)


운영체제의 역할로는 
자원관리, 하드웨어 인터페이스 제공, 자원보호, 사용자 인터페이스 제공이 있다.

하드웨어는 제조사마다 참 다르게 만들 수 있는데
운영체제는 하드웨어 인터페이스를 제공함으로써 다양한 제조사의 하드웨어를 일관된 방법으로 사용할 수 있게해준다.

유저인터페이스는 사용자가 운영체제를 편리하게 사용하기 위한것 이다.

운영체제의 목표
효율성 : 적은자원을 사용하여 결과를 더 빨리 보여주는 것, 즉 같은 자원량으로 더 많은 데이터를 처리하거나, 같은 작업량을 처리하는데 더 적은 자원을 사용하는 것.
운영체제의 크기를 최소화하고 코드를 최적화해야한다.

안정성: 운영체제는 정보와 자원을 보호해야하며, 문제가 생겼을 때 이전으로 복구하는 결함 포용기능 

확장성: 운영체제는 다양한 시스템 자원을 추가하거나 제거하는데 편리해야한다. 
즉 하드웨어 인터페이스와 같이 하드웨어와 상관없이 꽂으면 실행할 수 있는 플러그엔 플레이 기능을 제공해야한다.
예를들어 여러 하드웨어가 개발되는데 해당 하드웨어 마다 운영체제에 기능을 또 개발할 순 없는 노릇아닌가?
하드웨어 제작자를 위한 인터페이스를 잘 제공해주어야한다. 

편리성: 효율성, 안정성을 위해서 운영체제는 사용자에게 여러가지 제한을 걸 수 있다. 하지만 
제한이 많아질 수록 사용자의 편리성은 떨어질 것이다. 즉 운영체제는 사용자에게 편리성을 제공하면서도
컴퓨터 자원을 효율적이고 안정적이게 제공해야한다. 


초기 컴퓨터
1940년대 진공관을 전선으로 연결해 논리회로를 구성하여 원하는 결과값을 얻는 방식을 하드 와이어링이라한다.
하드와이어링 방식은 회로에 따른 결과만 나타나기 떄문에 다른 계산을 하기 위해선 논리회로를 구성하고 해당 논리회로에 맞게 전선을 수정해야한다.


일괄 작업 시스템
진공관과 전선으로 만들어진 논리회로를 아주작은 크기로 구현한 것이 IC칩이다.
천공카드 리더 -> 카드에 구멍을 뚫어 특정 방식으로 입력을 하고
라인 프린터를 통해 결과를 얻을 수 있었다. 
이전에는 새로운 계산을 위해서 논리회로를 다시 구성해야 했지만 
IC칩 이후부터는 입력인 카드만 변겨아면 새로운 계산을 할 수 있다.
모든 작업을 한꺼번에 처리하는 시스템을 일괄 작업 시스템이라 하는데 
일괄 작업 시스템에서는 운영체제가 사용되었다. 
이때 실행할 프로그램과 데이터를 동시에 넣어 처리해야 했고 오류가 발생하더라도 작업이 다 끝난 후 프린터를 통해 알 수 있었다. 

대화형 시스템
작업 중간에 사용자가 입력하거나 중간 결과값을 확인할 수 있다. 
대화형 시스템이 등장하면서 문서 편집, 게임과 같은 다양한 종류의 응용 프로그램을 만들 수 있게 되었다. 
대화형 시스템은 프로그램동안 언제 입력이되고 출력이 될지 예측하기 어렵다. 즉 작업 시간을 예측하기 어렵다.

시분할 시스템
멀티 프로그래밍 하나의 CPU로 여러 작업을 동시에 실행하는 기술
멀티 프로그래밍 시스템에서는 cpu 사용시간을 아주 잘게 쪼개에 여러 작업에 나누어 준다.
A,B,C가 동시에 진행을하고 각 작업에 1초를 할당하면 작업이 2초씩 끊기 겠지만 
만약 0.01초로 할당하면 사용자가 인지하지 못할 정도로 빠르게 cpu가 분할 되어 실행되 마치 동시에 실행되는 것 처럼 보인다.
이때 잘게 잘린 시간 단위를 타임 슬라이스 라고 한다.

시분할 시스템에서 동시에 실행되는 작업의 개수를 멀티프로그래밍 수준이라한다. 

시분할 시스템을 사용할때 메모리 사용자 역역에는 여러 프로그램이 공존한다. 사용자 메모리를 정리하는 추가 작업이 필요하고,
시스템 내에 많은 양의 작업이 공존할 경우 중요한 작업이 일정 시간안에 끝나는 것을 보장하지 못한다. 

특정 프로그램이 특정 시간안에 작업이 처리되도록 보장하는 시스템을 실시간 시스템이라 한다.
시분할 시스템을 통해 여러 사용자가 하나의 컴퓨터에서 동시에 작업을 할 수 있는데 이를 다중 사용자 시스템이라한다.
유닉스는 멀티프로그래밍과 다중 사용자를 지원하는 운영체제다.

분산 시스템
복잡한 계산이나 많은 양의 데이터를 처리하기 위해서 메인프레임이라는 고가의 대형 컴퓨터가 필요했는데
이를 값이 싸고 크기가 작은 컴퓨터를 하나로 붂어 메인프렘이에 버금가는 시스템을 만들게 되었는데 이를 분산 시스템이라 부른다.
분산 시스템은 여러 컴퓨터로 작업을 처리하고 그 결과를 상호 교환 하도록 구성한 시스템이다. 

클라이언트/서버 시스템
분산 시스템에서 시스템에 참가하는 모든 컴퓨터의 지위가 동일하다. 
컴퓨터가 고장이나거나 추가되면 분배하고 결과를 모으기 쉽지 않다.
이를 작업을 요청하는 클라이언트 컴퓨터와 요청한 작업을 수행하는 서버로 나누는 것을 클라이언트 서버 시스템이라한다.

클라이언트 서버 구조의 가장 큰 문제점은 서버 과부하다. 클라이언트가 갑작스럽게 증가하면 서버에 엄청난 부담이되고
또한 큰 용량의 네트워크가 필요하기 때문에 스케일을 잘 설정해야한다. 


P2P 시스템
MP3 파일은 개당 4~10MB 크기인데 이를 서버에 올려놓을 경우 서버 과부하는 불 보듯 뻔한 이야기이다.
서버는 MP3파일이 아닌 파일 목록만 가지고 MP3 파일을 얻고자하면 누가 파일의 소유자인지 확인하는 정보만 얻는다.
실제로 파일을 다운로드 받을 때에는 파일의 소유자로부터 직접 받는다.
이처럼 서버는 중재만 하고 파일을 얻고자하는 사용자과 파일을 제공하는 사용자가 직접 통신하는 시스템을 
peer to peer 시스템이라하며 간단히 p2p시스템이라 부른다. 
p2p는 서버 과부하를 줄이기 위해 만들어진 것이다.

클라우드 컴퓨팅
하드웨어와 소프트웨어를 클라우드라 불리는 중앙 시스템에 두고 사용자는 필요한 서비스만 그때그때 이용하는 방식을
클라우드 컴퓨팅이라 부른다.
클라우드 환경을 통해 인터넷만 연결되면 더이상 저장장치나 CD, USB를 들고다니지 않아도 쉽게 파일을 빠르게 다운로드 받아 사용할 수 있다.
클라우드 시스템은 인터넷에 접속하기만 하면 언제 어디서든 이용할 수 있는 서비스 이다.
그리드 시스템은 컴퓨터 기기를 하나의 초고속 네트워크로 연결하며 컴퓨터의 계산 능력을 극대화한 서비스

사물 인터넷 (IOT)
우리가 사용하는 사물들안에 임베디드 시스템에 센서와 통신 기능을 내장하여 외부와 연결되어 스스로 통신하며 지능적인 서비스를 제공하는 기술이다.

커널과 인터페이스
커널은 프로세스 관리, 메모리 관리, 저장장치 관리와 같은 운영체제의 핵심 기능을 구현한 프로그램이다.
인터페이스는 사용자와 응용프로그램으루 부터 요청을 받아 커널에 명령을 전달하고 실행 결과를 돌려준다.

커널과 인터페이스는 분리되어 있기 때문에 커널과 인터페이스는 독립적이다. 
운영체제는 크게 유닉스 계열 커널과 윈도우 계열 커널로 나뉜다.
유닉스에서 문자기반 인터페이스를 셸이라 부른다. 윈도우 에서는 cmd라 부른다 
사용자는 명령어 기반의 인터페이스를 어려워하고 그래픽 기반의 인터페이스를 선호한다.

시스템 호출은 커널이 자신을 보호하기 위해 만든 인터페이스이다.
사용자나 응용프로그램이 자원을 이용하기 위해선 시스템 호출이라는 인터페이스를 사용해야한다.
시스템 호출은 커널이 제공하는 시스템 자원을 사용하기 위한 함수이다.
응용 프로그램이 하드웨어 자원을 접근하거나 운영체제가 제공하는 서비스를 이용하기 위ㅐ선 시스템 호출을 사용해야한다.
시스템호출을 제외한 다른 방법이 없기 때문에 컴퓨터 자원을 보호할 수 있다.
시스템 호출과 유사한 용어로 API와 SDK가 있다. 

디바이스 드라이버 
커널과 하드웨어의 인터페이스를 드라이버라고한다. 
장치를 수월하게 사용하기 위해선 장치 드라이버가 필요하고 
장치드라이버는 펌웨어를 이용해 장치를 인식한다.

커널 역할
프로그램이 실행되면 프로세스로 등록되어 실행된다. 프로세스로 등록되면 작업 환경을 만들고 cpu와 ram 같은 자원을 분배해주고
프로세스 끝나면 자원을 회수한다.
여러개의 프로세스를 메모리에 배치하는 일을 한다. 
저장장치에 필요한 파일 시스템을 만들고 관리한다. 
키보드, 마우스, 네트워크, 사운드 카드, 그래픽 카드와 같은 주변장치로부터 발생하는 입출력을 처리하는 일도 커널의 주요역할이다.
프로그램 사이에 통신이 원활하게 일어나도록 다양한 환경을 제공한다.
